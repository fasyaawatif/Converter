/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Converter.java
 *
 * Created on Dec 1, 2019, 8:06:24 PM
 */
package Converter1;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Group Raihana, Fasya, Akmal, Syamimi
 */

public class Converter extends javax.swing.JFrame {

    /** Creates new form Converter */
    String currentPattern;
    private HashMap<String, Double> HashMap1;
    private ArrayList<String> currencies  = new ArrayList<String>();
    private Converter cc;
    DecimalFormat df = new DecimalFormat("#####.00");

    /** Creates new form Converter */

public Converter() throws Exception{
    
        /** Creates new form CurrencyConverterGUI */

        initComponents(); //generated by the IDE, when building project that has seperate xml
        String[] patternExamples = {"EUR", "USD"};

        XMLParser xp = new XMLParser(); //from xmlparser
        xp.Init(); //from xmlparser
        xp.parseAll(); //from xmlparser
        HashMap1 = xp.getHashMap(); //from xmlparser
        currencies.addAll(HashMap1.keySet()); //to list out all list of currency in gui

        for(String s: currencies){
            CurrencyBox1.addItem(s);
            CurrencyBox2.addItem(s);
        }
        
        CurrencyBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyBox1ActionPerformed(evt);
            }
        });

        CurrencyBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyBox2ActionPerformed(evt);
            }
        });


        CurrencyBox1.setEditable(false);
        CurrencyBox2.setEditable(false);

    }

public double convert(String FC, String TC, double amt) {

    double result = amt / HashMap1.get(FC) * HashMap1.get(TC);
    return result;

}

/** This method is called from within the constructor to
* initialize the form.
* WARNING: Do NOT modify this code. The content of this method is
* always regenerated by the Form Editor.
*/

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        CurrencyBox1 = new javax.swing.JComboBox();
        CurrencyBox2 = new javax.swing.JComboBox();
        CurrencyText1 = new javax.swing.JTextField();
        CurrencyText2 = new javax.swing.JTextField();
        ResetButton = new javax.swing.JButton();
        
        setTitle("Currency Converter"); 

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CurrencyBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "USD"}));
        CurrencyBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyBox1ActionPerformed(evt);
            }
        });

        CurrencyBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"USD" }));
        CurrencyBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyBox2ActionPerformed(evt);
            }
        });

        CurrencyText1.setText("0.0");
        CurrencyText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyText1ActionPerformed(evt);
            }
        });

        CurrencyText2.setText("0.0");
        CurrencyText2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyText2ActionPerformed(evt);
            }
        });

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CurrencyText1)
                            .addComponent(CurrencyBox1, 0, 125, Short.MAX_VALUE))
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CurrencyText2)
                            .addComponent(CurrencyBox2, 0, 97, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(ResetButton)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrencyBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CurrencyBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrencyText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CurrencyText2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(ResetButton)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void CurrencyBox1ActionPerformed(java.awt.event.ActionEvent evt) {

        String s = this.CurrencyText2.getText();
        
        if(s.trim().length() == 0){
            //pop up errort message - input is empty
            return;
        }

    }

    private void CurrencyBox2ActionPerformed(java.awt.event.ActionEvent evt) {

        String from = (String) CurrencyBox1.getSelectedItem();
        String to = (String) CurrencyBox2.getSelectedItem();
        String s=  CurrencyText1.getText();
        if(s.trim().length() == 0){

            //pop up errort message - input is empty
            return;

        }

        //double amount = Double.parseDouble(this.CurrencyText1.getText());
        
        double amount = Double.parseDouble(s);
        System.out.println("from " + from + " to " + to + " amount " + amount);
        double converted = convert(from, to, amount);
        CurrencyText2.setText(df.format(converted) + "");
        System.out.println("converted to " + converted);

    }

    private void CurrencyText1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String s=  CurrencyText1.getText();
        if(s.trim().length() == 0){

            //pop up errort message - input is empty
            return;

        }

    }

    private void CurrencyText2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String s = CurrencyText2.getText();
        if(s.trim().length() == 0){
            //pop up errort message - input is empty
            return;

        }

    }

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        CurrencyText1.setText("");

        CurrencyText2.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new Converter().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JComboBox CurrencyBox1;
    private javax.swing.JComboBox CurrencyBox2;
    private javax.swing.JTextField CurrencyText1;
    private javax.swing.JTextField CurrencyText2;
    private javax.swing.JButton ResetButton;
    // End of variables declaration
}